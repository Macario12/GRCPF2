// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameClient interface {
	GetGames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GameResponse, error)
	AddGame(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (Game_AddGameClient, error)
}

type gameClient struct {
	cc grpc.ClientConnInterface
}

func NewGameClient(cc grpc.ClientConnInterface) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) GetGames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GameResponse, error) {
	out := new(GameResponse)
	err := c.cc.Invoke(ctx, "/Game.Game/GetGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) AddGame(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (Game_AddGameClient, error) {
	stream, err := c.cc.NewStream(ctx, &Game_ServiceDesc.Streams[0], "/Game.Game/AddGame", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameAddGameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Game_AddGameClient interface {
	Recv() (*GameResponse, error)
	grpc.ClientStream
}

type gameAddGameClient struct {
	grpc.ClientStream
}

func (x *gameAddGameClient) Recv() (*GameResponse, error) {
	m := new(GameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameServer is the server API for Game service.
// All implementations must embed UnimplementedGameServer
// for forward compatibility
type GameServer interface {
	GetGames(context.Context, *Empty) (*GameResponse, error)
	AddGame(*GameRequest, Game_AddGameServer) error
	mustEmbedUnimplementedGameServer()
}

// UnimplementedGameServer must be embedded to have forward compatible implementations.
type UnimplementedGameServer struct {
}

func (UnimplementedGameServer) GetGames(context.Context, *Empty) (*GameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGames not implemented")
}
func (UnimplementedGameServer) AddGame(*GameRequest, Game_AddGameServer) error {
	return status.Errorf(codes.Unimplemented, "method AddGame not implemented")
}
func (UnimplementedGameServer) mustEmbedUnimplementedGameServer() {}

// UnsafeGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServer will
// result in compilation errors.
type UnsafeGameServer interface {
	mustEmbedUnimplementedGameServer()
}

func RegisterGameServer(s grpc.ServiceRegistrar, srv GameServer) {
	s.RegisterService(&Game_ServiceDesc, srv)
}

func _Game_GetGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game.Game/GetGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetGames(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_AddGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServer).AddGame(m, &gameAddGameServer{stream})
}

type Game_AddGameServer interface {
	Send(*GameResponse) error
	grpc.ServerStream
}

type gameAddGameServer struct {
	grpc.ServerStream
}

func (x *gameAddGameServer) Send(m *GameResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Game_ServiceDesc is the grpc.ServiceDesc for Game service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Game_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Game.Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGames",
			Handler:    _Game_GetGames_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddGame",
			Handler:       _Game_AddGame_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/Game.proto",
}
